//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: TestClass.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TestClass.h"

@interface TestClass ()

+ (void)nativeTestFuncWithIntArray:(IOSIntArray *)intArray
                     withLongArray:(IOSLongArray *)longArray;

@end

void TestClass_nativeTestFuncWithIntArray_withLongArray_(IOSIntArray *intArray, IOSLongArray *longArray);

@implementation TestClass

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TestClass_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testFunc {
  IOSIntArray *intArray = [IOSIntArray arrayWithInts:(jint[]){ 1234 } count:1];
  IOSLongArray *longArray = [IOSLongArray arrayWithLongs:(jlong[]){ 1234LL } count:1];
  TestClass_nativeTestFuncWithIntArray_withLongArray_(intArray, longArray);
}

+ (void)nativeTestFuncWithIntArray:(IOSIntArray *)intArray
                     withLongArray:(IOSLongArray *)longArray {
  TestClass_nativeTestFuncWithIntArray_withLongArray_(intArray, longArray);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testFunc);
  methods[2].selector = @selector(nativeTestFuncWithIntArray:withLongArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "nativeTestFunc", "[I[J" };
  static const J2ObjcClassInfo _TestClass = { "TestClass", NULL, ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_TestClass;
}

@end

void TestClass_init(TestClass *self) {
  NSObject_init(self);
}

TestClass *new_TestClass_init() {
  J2OBJC_NEW_IMPL(TestClass, init)
}

TestClass *create_TestClass_init() {
  J2OBJC_CREATE_IMPL(TestClass, init)
}

JNIEXPORT void Java_TestClass_nativeTestFunc(JNIEnv *_env_, jclass _cls_, jarray intArray, jarray longArray);

void TestClass_nativeTestFuncWithIntArray_withLongArray_(IOSIntArray *intArray, IOSLongArray *longArray) {
  Java_TestClass_nativeTestFunc(&J2ObjC_JNIEnv, TestClass_class_(), intArray, longArray);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestClass)
